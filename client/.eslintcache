[{"/Users/jihoon/Desktop/Database2020/client/src/index.js":"1","/Users/jihoon/Desktop/Database2020/client/src/reportWebVitals.js":"2","/Users/jihoon/Desktop/Database2020/client/src/App.js":"3","/Users/jihoon/Desktop/Database2020/client/src/View/Template.js":"4","/Users/jihoon/Desktop/Database2020/client/src/View/AdminUserMng.js":"5","/Users/jihoon/Desktop/Database2020/client/src/View/EditUserInfo.js":"6","/Users/jihoon/Desktop/Database2020/client/src/View/AdminTaskEdit.js":"7","/Users/jihoon/Desktop/Database2020/client/src/View/AdminAddTask.js":"8","/Users/jihoon/Desktop/Database2020/client/src/View/Signup.js":"9","/Users/jihoon/Desktop/Database2020/client/src/View/SubmitterTaskView.js":"10","/Users/jihoon/Desktop/Database2020/client/src/View/AdminTaskView.js":"11","/Users/jihoon/Desktop/Database2020/client/src/View/SubmitterMain.js":"12","/Users/jihoon/Desktop/Database2020/client/src/View/EstimatorMain.js":"13","/Users/jihoon/Desktop/Database2020/client/src/View/AdminMain.js":"14","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminNav.js":"15","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminUserRowNav.js":"16","/Users/jihoon/Desktop/Database2020/client/src/Components/CreateTaskTwo.js":"17","/Users/jihoon/Desktop/Database2020/client/src/Components/classes.js":"18","/Users/jihoon/Desktop/Database2020/client/src/Components/Loading.js":"19","/Users/jihoon/Desktop/Database2020/client/src/Components/Schema.js":"20","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterTaskRowNav.js":"21","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterTaskRow.js":"22","/Users/jihoon/Desktop/Database2020/client/src/Components/CreateTaskFirst.js":"23","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterSubmit.js":"24","/Users/jihoon/Desktop/Database2020/client/src/Components/CreateTaskThree.js":"25","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminUserRow.js":"26","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminParticipantRow.js":"27","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminParticipantRowNav.js":"28","/Users/jihoon/Desktop/Database2020/client/src/Components/Login.js":"29","/Users/jihoon/Desktop/Database2020/client/src/Components/Nav.js":"30","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterJoined.js":"31","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterTopRow1.js":"32","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterTopRow2.js":"33","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterNew.js":"34","/Users/jihoon/Desktop/Database2020/client/src/Components/EstimatorTopRow.js":"35","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminTaskRowNav.js":"36","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterWaiting.js":"37","/Users/jihoon/Desktop/Database2020/client/src/Components/EstimateUnfinished.js":"38","/Users/jihoon/Desktop/Database2020/client/src/Components/EstimateFinished.js":"39","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminTaskRow.js":"40","/Users/jihoon/Desktop/Database2020/client/src/Components/EstimatorEstimate.js":"41","/Users/jihoon/Desktop/Database2020/client/src/Components/EstimatorDetail.js":"42"},{"size":266,"mtime":1607235632233,"results":"43","hashOfConfig":"44"},{"size":364,"mtime":1607235632233,"results":"45","hashOfConfig":"44"},{"size":1174,"mtime":1607235632224,"results":"46","hashOfConfig":"44"},{"size":1539,"mtime":1607235632232,"results":"47","hashOfConfig":"44"},{"size":4821,"mtime":1607235632231,"results":"48","hashOfConfig":"44"},{"size":4185,"mtime":1607235632232,"results":"49","hashOfConfig":"44"},{"size":7039,"mtime":1607235632231,"results":"50","hashOfConfig":"44"},{"size":1446,"mtime":1607235632231,"results":"51","hashOfConfig":"44"},{"size":6709,"mtime":1607235632232,"results":"52","hashOfConfig":"44"},{"size":2746,"mtime":1607235632232,"results":"53","hashOfConfig":"44"},{"size":6008,"mtime":1607235632231,"results":"54","hashOfConfig":"44"},{"size":4171,"mtime":1607235632232,"results":"55","hashOfConfig":"44"},{"size":3912,"mtime":1607235632232,"results":"56","hashOfConfig":"44"},{"size":1969,"mtime":1607235632231,"results":"57","hashOfConfig":"44"},{"size":1854,"mtime":1607235632225,"results":"58","hashOfConfig":"44"},{"size":311,"mtime":1607235632226,"results":"59","hashOfConfig":"44"},{"size":2864,"mtime":1607235632226,"results":"60","hashOfConfig":"44"},{"size":3578,"mtime":1607235632229,"results":"61","hashOfConfig":"44"},{"size":264,"mtime":1607235632227,"results":"62","hashOfConfig":"44"},{"size":3859,"mtime":1607235632227,"results":"63","hashOfConfig":"44"},{"size":290,"mtime":1607235632228,"results":"64","hashOfConfig":"44"},{"size":436,"mtime":1607235632228,"results":"65","hashOfConfig":"44"},{"size":3277,"mtime":1607235632226,"results":"66","hashOfConfig":"44"},{"size":7022,"mtime":1607240380755,"results":"67","hashOfConfig":"44"},{"size":4566,"mtime":1607235632226,"results":"68","hashOfConfig":"44"},{"size":583,"mtime":1607235632225,"results":"69","hashOfConfig":"44"},{"size":924,"mtime":1607235632225,"results":"70","hashOfConfig":"44"},{"size":287,"mtime":1607235632225,"results":"71","hashOfConfig":"44"},{"size":2649,"mtime":1607235632227,"results":"72","hashOfConfig":"44"},{"size":1573,"mtime":1607235632227,"results":"73","hashOfConfig":"44"},{"size":632,"mtime":1607235632227,"results":"74","hashOfConfig":"44"},{"size":298,"mtime":1607235632228,"results":"75","hashOfConfig":"44"},{"size":252,"mtime":1607235632228,"results":"76","hashOfConfig":"44"},{"size":1125,"mtime":1607235632227,"results":"77","hashOfConfig":"44"},{"size":285,"mtime":1607235632227,"results":"78","hashOfConfig":"44"},{"size":314,"mtime":1607235632225,"results":"79","hashOfConfig":"44"},{"size":470,"mtime":1607235632228,"results":"80","hashOfConfig":"44"},{"size":792,"mtime":1607235632226,"results":"81","hashOfConfig":"44"},{"size":820,"mtime":1607235632226,"results":"82","hashOfConfig":"44"},{"size":746,"mtime":1607235632225,"results":"83","hashOfConfig":"44"},{"size":2788,"mtime":1607235632226,"results":"84","hashOfConfig":"44"},{"size":1970,"mtime":1607235632226,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"17kesq6",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"88"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"88"},"/Users/jihoon/Desktop/Database2020/client/src/index.js",[],["189","190"],"/Users/jihoon/Desktop/Database2020/client/src/reportWebVitals.js",[],"/Users/jihoon/Desktop/Database2020/client/src/App.js",[],"/Users/jihoon/Desktop/Database2020/client/src/View/Template.js",[],"/Users/jihoon/Desktop/Database2020/client/src/View/AdminUserMng.js",["191","192"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AdminNav } from \"../Components/AdminNav\";\nimport { AdminUserRowNav } from \"../Components/AdminUserRowNav\";\nimport { AdminUserRow } from \"../Components/AdminUserRow\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { AdminUser } from \"../Components/classes\";\nimport { Loading } from \"../Components/Loading\";\n\nconst AdminUserMng = () => {\n  var logInfo;\n  var history = useHistory();\n  const axios = require(\"axios\").default;\n  const [data, setData] = useState();\n  const [userList, setUserList] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [url, setURL] = useState(\"/api/userList\");\n  const [taskInfo, setTaskInfo] = useState();\n  const [loading, setLoading] = useState(true);\n  const loggedIn = localStorage.getItem(\"user\");\n\n  if (loggedIn) {\n    logInfo = JSON.parse(loggedIn);\n  } else {\n    history.push(\"/\");\n  }\n\n  const Search = () => {\n    var source = document.getElementById(\"sources\");\n    var value = source.value;\n    var input;\n    if (value === \"task\") {\n      input = text;\n      setURL(`api/userList/task/${input}`);\n    } else if (value === \"BirthDate\") {\n      input = calculateYear(text);\n      setURL(`api/userList/${value}&${input}`);\n    } else if (value === \"Gender\") {\n      input = text === \"남자\" ? 0 : 1;\n      setURL(`api/userList/${value}=${input}`);\n    } else {\n      if (value === \"Role\") {\n        input = text === \"제출자\" ? \"Submitter\" : \"Estimator\";\n      } else {\n        input = text;\n      }\n      setURL(`api/userList/${value}=\"${input}\"`);\n    }\n  };\n\n  const calculateAge = (year) => {\n    return 2020 - parseInt(year);\n  };\n\n  const calculateYear = (age) => {\n    return 2020 - parseInt(age);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    async function fetchData() {\n      await axios.get(url).then((res) => {\n        setData(res.data);\n      });\n      await axios.get(\"/api/userTask\").then((res) => {\n        setTaskInfo(res.data);\n      });\n    }\n    fetchData();\n  }, [url]);\n\n  useEffect(() => {\n    if (!data) return;\n    if (!taskInfo) return;\n    var list = [];\n    for (var i = 0; i < data.length; i++) {\n      var task = [];\n      for (var j = 0; j < taskInfo.length; j++) {\n        if (taskInfo[j].AppliedSubmitterID === data[i].AccountID) {\n          task.push(taskInfo[j].Name);\n        }\n      }\n      list.push(\n        new AdminUser(\n          data[i].AccountID,\n          data[i].Name,\n          data[i].Role === \"Submitter\" ? \"제출자\" : \"평가자\",\n          calculateAge(data[i].BirthDate.slice(0, 4)),\n          data[i].Gender.data == 0 ? \"남자\" : \"여자\",\n          data[i].UserID,\n          task\n        )\n      );\n    }\n    setUserList(list);\n    setLoading(false);\n  }, [data, taskInfo]);\n\n  return (\n    <div>\n      <AdminNav\n        userType={\"관리자\"}\n        name={logInfo.name}\n        userID={logInfo.userID}\n      />\n      <div className={styles.center_all}>\n        <h2 className={styles.list_title}>회원 목록</h2>\n        <div className={styles.main_container}>\n          <div className={styles.sub_container_1}>\n            {loading && <Loading />}\n            {!loading && (\n              <div>\n                <AdminUserRowNav />\n                <div\n                  className={styles.scrollable_div}\n                  style={{ height: \"540px\" }}\n                >\n                  {userList.map((user) => (\n                    <AdminUserRow user={user} />\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className={styles.last_row}>\n          <div>\n            <select\n              name=\"sources\"\n              id=\"sources\"\n              className={`${styles.custom_select} ${styles.sources}`}\n              placeholder=\"검색 옵션: \"\n            >\n              <option value=\"0\">검색 옵션:</option>\n              <option value=\"Name\">이름</option>\n              <option value=\"Role\">역할</option>\n              <option value=\"BirthDate\">나이</option>\n              <option value=\"Gender\">성별</option>\n              <option value=\"UserID\">ID</option>\n              <option value=\"task\">참여태스크</option>\n            </select>\n          </div>\n          <div>\n            <input\n              type=\"text\"\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n            />\n          </div>\n          <div>\n            <IconButton onClick={() => Search()}>\n              <SearchIcon className={styles.search_button} />\n            </IconButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminUserMng;","/Users/jihoon/Desktop/Database2020/client/src/View/EditUserInfo.js",[],"/Users/jihoon/Desktop/Database2020/client/src/View/AdminTaskEdit.js",["193","194"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { useHistory } from \"react-router-dom\";\nimport { RPair } from \"../Components/classes\";\nimport { RSC } from \"../Components/classes\";\nimport { Schema } from \"../Components/Schema\";\nimport { AdminNav } from \"../Components/AdminNav\";\nimport { Loading } from \"../Components/Loading\";\n\nconst AdminTaskEdit = (props) => {\n  const axios = require(\"axios\").default;\n  const url = \"/api/AdminTask/SetScore\";\n  const task = props.location.task;\n  const [newPassScore, setNewPassScore] = useState(task.passScore);\n  const [toggleAdd, setToggleAdd] = useState(false);\n  const [name, setName] = useState();\n  const [num, setNum] = useState(2);\n  const [row, setRow] = useState([1]);\n  const [pairList, setPairList] = useState([new RPair()]);\n  const [tdt, setTdt] = useState();\n  const [loading, setLoading] = useState(true);\n\n  var logInfo;\n  var history = useHistory();\n  const loggedIn = localStorage.getItem(\"user\");\n  if (loggedIn) {\n    logInfo = JSON.parse(loggedIn);\n  } else {\n    history.push(\"/\");\n  }\n\n  const saveScore = async () => {\n    await axios.post(url, {\n      taskID: task.taskID,\n      newValue: newPassScore,\n    });\n    history.push(\"/\");\n  };\n\n  const handleRemove = () => {\n    if (num === 2) {\n      return;\n    }\n    setNum(num - 1);\n    setRow(row.filter((item) => item !== num - 1));\n    setPairList(pairList.slice(0, -1));\n  };\n\n  const handleComplete = () => {\n    if (name === \"\" || name === undefined || name === null) {\n      setToggleAdd(!toggleAdd);\n    } else {\n      var finalList = [];\n      for (var i = 0; i < pairList.length; i++) {\n        if (pairList[i].name !== undefined && pairList[i].type !== undefined) {\n          finalList.push(pairList[i]);\n        }\n      }\n      var RDT = new RSC(name, finalList);\n      const newRDT = async () => {\n        axios.post(\"/api/UpdateRDT\", { taskID: task.taskID, newRDT: RDT });\n      };\n      newRDT();\n      setToggleAdd(false);\n      alert(\"원본 데이터 타입이 추가되었습니다.\");\n    }\n  };\n\n  useEffect(() => {\n    const fetchTdt = async () => {\n      axios.get(`/api/TaskDataTable/${task.taskID}`).then((res) => {\n        setTdt(JSON.parse(res.data[0].TaskDataTableSchema));\n      });\n    };\n    fetchTdt();\n  }, []);\n\n  useEffect(() => {\n    if (!tdt) return;\n    setLoading(false);\n  }, [tdt]);\n\n  return (\n    <div>\n      <AdminNav\n        userType={\"관리자\"}\n        name={logInfo.name}\n        userID={logInfo.userID}\n      />\n      <div className={styles.center_all}>\n        <div className={styles.main_container}>\n          {!toggleAdd && (\n            <div className={styles.sub_container_1}>\n              <div className={styles.ca}>\n                <form noValidate autoComplete=\"off\">\n                  <div className={styles.nbc}>\n                    <TextField\n                      className={styles.name_box}\n                      id=\"name\"\n                      label=\"태스크 이름\"\n                      defaultValue={task.name}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </div>\n                  <div className={styles.nbc}>\n                    <TextField\n                      className={styles.name_box}\n                      id=\"pass_score\"\n                      label=\"패스 기준 점수\"\n                      defaultValue={task.PassScore}\n                      value={newPassScore}\n                      type=\"number\"\n                      shrink\n                      onChange={(e) => {\n                        if (e.target.value < 0) {\n                          setNewPassScore(0);\n                        } else if (e.target.value > 10) {\n                          setNewPassScore(10);\n                        } else {\n                          setNewPassScore(e.target.value);\n                        }\n                      }}\n                    />\n                  </div>\n                </form>\n                <div className={styles.button_container}>\n                  <button\n                    className={`${styles.add_btn} ${styles.button_row}`}\n                    onClick={() => setToggleAdd(!toggleAdd)}\n                  >\n                    원본데이터타입 추가\n                  </button>\n                  <button\n                    className={`${styles.add_btn} ${styles.button_row}`}\n                    onClick={() => saveScore()}\n                  >\n                    완료\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n          {toggleAdd && (\n            <div className={`${styles.sub_container_a} ${styles.ninety}`}>\n              <div className={styles.title}>\n                <h1>원본데이터타입 스키마 설정</h1>\n              </div>\n              <form noValidate autoComplete=\"off\">\n                <div>\n                  <TextField\n                    className={styles.input_box}\n                    id=\"name\"\n                    label=\"원본데이터타입 이름\"\n                    placeholder=\"원본데이터 타입 이름을 입력하시오.\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                  />\n                </div>\n                {!loading && (\n                  <div className={`${styles.scrollable_div} ${styles.new_box}`}>\n                    {row.map((item) => (\n                      <Schema\n                        key={item}\n                        pair={pairList[item - 1]}\n                        raw={true}\n                        tdt={tdt}\n                      />\n                    ))}\n                  </div>\n                )}\n              </form>\n              <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                <IconButton\n                  onClick={() => {\n                    handleRemove();\n                  }}\n                >\n                  <RemoveCircleIcon />\n                </IconButton>\n                <IconButton\n                  onClick={() => {\n                    setPairList([...pairList, new RPair()]);\n                    setNum(num + 1);\n                    setRow([...row, num]);\n                  }}\n                >\n                  <AddCircleIcon />\n                </IconButton>\n              </div>\n\n              <div className={styles.button_container}>\n                <button\n                  className={`${styles.add_btn} ${styles.button_row}`}\n                  onClick={() => handleComplete()}\n                >\n                  완료\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminTaskEdit;","/Users/jihoon/Desktop/Database2020/client/src/View/AdminAddTask.js",["195","196"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { NewTask } from \"../Components/classes\";\n\nimport { AdminNav } from \"../Components/AdminNav\";\nimport { CreateTaskFirst } from \"../Components/CreateTaskFirst\";\nimport { CreateTaskTwo } from \"../Components/CreateTaskTwo\";\nimport { CreateTaskThree } from \"../Components/CreateTaskThree\";\n\nconst AdminAddTask = () => {\n  const [step, setStep] = useState(1);\n  const [newTask, setNewTask] = useState(new NewTask());\n  console.log(newTask.RDTSchema);\n  var logInfo;\n  var history = useHistory();\n  const loggedIn = localStorage.getItem(\"user\");\n  if (loggedIn) {\n    logInfo = JSON.parse(loggedIn);\n  } else {\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    newTask.RDTSchema = [];\n  }, []);\n\n  return (\n    <div>\n      <AdminNav\n        userType={\"관리자\"}\n        name={logInfo.name}\n        userID={logInfo.userID}\n      />\n      <div className={styles.center_all}>\n        <div className={styles.main_container}>\n          {step === 1 && (\n            <CreateTaskFirst setStep={setStep} newTask={newTask} />\n          )}\n          {step === 2 && <CreateTaskTwo setStep={setStep} newTask={newTask} />}\n          {step === 3 && (\n            <CreateTaskThree setStep={setStep} newTask={newTask} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminAddTask;","/Users/jihoon/Desktop/Database2020/client/src/View/Signup.js",[],"/Users/jihoon/Desktop/Database2020/client/src/View/SubmitterTaskView.js",["197","198","199","200","201"],"import React, { useState,useEffect} from \"react\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { useLocation } from 'react-router-dom'\nimport { fileTask, PNP } from \"../Components/classes\";\n\n\nimport { SubmitterTaskRowNav } from \"../Components/SubmitterTaskRowNav\";\nimport { SubmitterTaskRow } from \"../Components/SubmitterTaskRow\";\nimport { SubmitterSubmit } from \"../Components/SubmitterSubmit\";\nimport { Nav } from \"../Components/Nav\";\nimport { useForkRef } from \"@material-ui/core\";\n\nexport const SubmitterTaskView = () => {\n  var logInfo;\n  var history = useHistory();\n  const loggedIn = localStorage.getItem(\"user\");\n  if (loggedIn) {\n    logInfo = JSON.parse(loggedIn);\n  } else {\n    history.push(\"/\");\n  }\n  \n  let location = useLocation();\n  let tid = location.pathname.split('/')[2];\n  \n  const axios = require(\"axios\").default;\n  const [data, setData] = useState();\n  const [taskInfo, setTaskInfo] = useState();\n  const [taskList, setTaskList] = useState([]);\n\n  const [togglePopUp, setTogglePopUp] = useState(false);\n  const Submit = () => {\n    // Get Information About Chosen Task\n    setTogglePopUp(true);\n  };\n  \n  const url = \"/api/submittedTasklist/\";\n  useEffect(() => {\n    async function fetchData() {\n      await axios.get(url+'4/'+`${logInfo.accountID}/${tid}`).then((res) => {\n        setData(res.data);\n      });\n      await axios.get(url+'4/'+`${tid}`).then((res) => {\n        setTaskInfo(res.data);\n      });\n    }\n    fetchData();\n  }, []);\n\n  \n  useEffect(() => {\n    if (!data) return;\n    var list = [];\n    for (let i = 0; i < data.length; i++) {\n      list.push(\n        new fileTask(\n          data[i].fileName,\n          data[i].fileScore,\n          data[i].fileType,\n          data[i].fileDate,\n          data[i].filePNP\n          )\n      );\n    }\n    setTaskList(list);\n  }, [data]);\n\n  return (\n    <div className={styles.center_all}>\n      <Nav\n        userType={\"제출자\"}\n        name={logInfo.name}\n        userID={logInfo.userID}\n      />\n      <h2 className={styles.list_title}>파일 목록</h2>\n      <div className={styles.main_container}>\n        <div className={styles.sub_container_1}>\n          <SubmitterTaskRowNav />\n          <div className={styles.scrollable_div}>\n          {taskList.map((task) => (\n            <SubmitterTaskRow task={task} \n\n            />\n          ))}\n          </div>\n        </div>\n      </div>\n      <button className={styles.add_btn} onClick={() => Submit()}>\n            제출하기\n      </button>\n      {togglePopUp && (\n      <SubmitterSubmit\n        setTogglePopUp={setTogglePopUp}\n        taskName={taskInfo[0].Name}\n        taskDesc={taskInfo[0].Description}\n      />)\n      }\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/View/AdminTaskView.js",["202","203"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { TaskUser } from \"../Components/classes\";\n\nimport { AdminParticipantRowNav } from \"../Components/AdminParticipantRowNav\";\nimport { AdminParticipantRow } from \"../Components/AdminParticipantRow\";\nimport { AdminNav } from \"../Components/AdminNav\";\nimport { Loading } from \"../Components/Loading\";\n\nconst AdminTaskView = (props) => {\n  const task = props.location.task;\n  const axios = require(\"axios\").default;\n  const url = `/api/userQueue/${task.taskID}`;\n  const [userList, setUserList] = useState([]);\n  const [userData, setUserData] = useState();\n  const [reload, setReload] = useState(true);\n  const [loading, setLoading] = useState(true);\n\n  var logInfo;\n  var history = useHistory();\n  const loggedIn = localStorage.getItem(\"user\");\n  if (loggedIn) {\n    logInfo = JSON.parse(loggedIn);\n  } else {\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    async function fetchUserData() {\n      await axios\n        .get(url)\n        .then((res) => {\n          setUserData(res.data);\n        })\n        .catch((err) => console.log(err));\n    }\n    fetchUserData();\n  }, [reload, props]);\n\n  useEffect(() => {\n    if (!userData) return;\n    setLoading(false);\n    if (userData.length === 0) return;\n    var list = [];\n    for (let i = 0; i < userData.length; i++) {\n      var app;\n      if (!userData[i].Approval) {\n        app = null;\n      } else {\n        app = userData[i].Approval.data;\n      }\n      list.push(\n        new TaskUser(\n          userData[i].AccountID,\n          userData[i].Name,\n          userData[i].Role === \"Submitter\" ? \"제출자\" : \"평가자\",\n          userData[i].Gender.data == 0 ? \"남자\" : \"여자\",\n          userData[i].BirthDate.slice(0, 10),\n          userData[i].Score,\n          app\n        )\n      );\n    }\n    setUserList(list);\n    setLoading(false);\n  }, [userData]);\n\n  return (\n    <div>\n      <AdminNav\n        userType={\"관리자\"}\n        name={logInfo.name}\n        userID={logInfo.userID}\n      />\n      <div className={styles.center_all}>\n        <div className={styles.main_container}>\n          <div className={styles.sub_container_a}>\n            <div className={styles.row_container}>\n              <div>\n                <h2>태스크 이름</h2>\n                <p>{task.name}</p>\n              </div>\n              <div>\n                <h2>설명</h2>\n                <p>{task.desc}</p>\n              </div>\n            </div>\n            <div className={styles.row_container}>\n              <div>\n                <h2>제출 주기</h2>\n                <p>{task.period}</p>\n              </div>\n              <div>\n                <h2>패스 기준</h2>\n                <p>7</p>\n              </div>\n            </div>\n            <div className={styles.row_container}>\n              <div>\n                <h2>총 제출 수</h2>\n                <div className={styles.scrollable_div}>\n                  <table>\n                    <tr>\n                      <th>원본타입이름</th>\n                      <th>제출 수</th>\n                    </tr>\n                    <tr>\n                      <td>원본타입1</td>\n                      <td>10</td>\n                    </tr>\n                    <tr>\n                      <td>원본타입2</td>\n                      <td>90</td>\n                    </tr>\n                    <tr>\n                      <td>총</td>\n                      <td>100</td>\n                    </tr>\n                  </table>\n                </div>\n              </div>\n              <div>\n                <h2>저장된 튜플 수</h2>\n                <div className={styles.scrollable_div}>\n                  <table>\n                    <tr>\n                      <th>원본타입이름</th>\n                      <th>저장 수</th>\n                    </tr>\n                    <tr>\n                      <td>원본타입1</td>\n                      <td>10</td>\n                    </tr>\n                    <tr>\n                      <td>원본타입2</td>\n                      <td>90</td>\n                    </tr>\n                    <tr>\n                      <td>총</td>\n                      <td>100</td>\n                    </tr>\n                  </table>\n                </div>\n              </div>\n            </div>\n            <div className={styles.button_container}>\n              <button className={`${styles.add_btn} ${styles.button_row}`}>\n                다운로드\n              </button>\n              <button\n                className={`${styles.add_btn} ${styles.button_row}`}\n                onClick={() => history.push(\"/\")}\n              >\n                닫기\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className={styles.main_container}>\n          <div className={styles.sub_container_b}>\n            {loading && <Loading />}\n            {!loading && (\n              <div>\n                <AdminParticipantRowNav />\n                <div\n                  className={styles.scrollable_div}\n                  style={{ height: \"100px\" }}\n                >\n                  {userList.map((user) => (\n                    <Link\n                      to={{\n                        pathname: `/UserDetail/${user.AccountID}`,\n                        user: user,\n                        taskID: task.taskID,\n                        newProps: props,\n                      }}\n                    >\n                      <AdminParticipantRow\n                        key={user.AccountID}\n                        user={user}\n                        taskID={task.taskID}\n                        setReload={setReload}\n                        reload={reload}\n                      />\n                    </Link>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminTaskView;","/Users/jihoon/Desktop/Database2020/client/src/View/SubmitterMain.js",["204","205","206","207","208","209","210","211","212","213","214","215","216"],"import React, { useState, useEffect } from \"react\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport { otherTask, SubmittedTask } from \"../Components/classes\";\n\n\nimport { SubmitterTopRow1 } from \"../Components/SubmitterTopRow1\";\nimport { SubmitterTopRow2 } from \"../Components/SubmitterTopRow2\";\nimport { SubmitterJoined } from \"../Components/SubmitterJoined\";\nimport { SubmitterNew } from \"../Components/SubmitterNew\";\nimport { SubmitterWaiting } from \"../Components/SubmitterWaiting\";\n\n\n\nexport const SubmitterMain = ({ loginfo }) => {\n  var Joined = [];\n  var New = [];\n  var Waiting = [];\n\n  const LoadTasks = (Joined, New, Waiting) => {\n    // function to initially load tasks to lists;\n  };\n\n  //\n  \n  const axios = require(\"axios\").default;\n  const [tmpData1, setTmpData1] = useState();\n  const [tmpData2, setTmpData2] = useState();\n  const [data, setData] = useState();\n  const [taskList, setTaskList] = useState([]);\n  \n  const [data2, setData2] = useState();\n  const [taskList2, setTaskList2] = useState([]);\n\n  const [data3, setData3] = useState();\n  const [taskList3, setTaskList3] = useState([]);\n\n \n  const url = \"/api/submittedTasklist/\";\n  useEffect(() => {\n    async function fetchData() {\n      await axios.get(url+'1/'+`${loginfo.accountID}` + '/a').then((res) => {\n        setTmpData1(res.data);\n      });\n      await axios.get(url+'1/'+`${loginfo.accountID}` + '/b').then((res) => {\n        setTmpData2(res.data);\n      });\n      \n      await axios.get(url+'2/'+`${loginfo.accountID}`).then((res) => {\n        setData2(res.data);\n      });\n      await axios.get(url+'3/'+`${loginfo.accountID}`).then((res) => {\n        setData3(res.data);\n      });\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (!tmpData1) return;\n    var taskList = [];\n    var i = 0;\n    for (i; i < tmpData2.length; i++) {\n      taskList.push(\n        new SubmittedTask(\n          tmpData1[i].taskID,\n          tmpData1[i].taskName,\n          tmpData1[i].taskDesc,\n          tmpData2[i].taskDate,\n          tmpData2[i].taskNum\n        )\n      );  \n    }\n    \n    for (i; i < tmpData1.length; i++){\n      taskList.push(\n        new SubmittedTask(\n          tmpData1[i].taskID,\n          tmpData1[i].taskName,\n          tmpData1[i].taskDesc,\n          0,\n          0\n        )\n      );  \n    }\n    setTaskList(taskList);\n    //console.log(data);\n\n    if (!data2) return;\n    var taskList2 = [];\n    for (let i = 0; i < data2.length; i++) {\n      taskList2.push(\n        new otherTask(\n          data2[i].taskID,\n          data2[i].taskName,\n          data2[i].taskDesc,\n\n        )\n      );\n    }\n    setTaskList2(taskList2);\n    //console.log(data2);\n\n    if (!data3) return;\n    var taskList3 = [];\n    for (let i = 0; i < data3.length; i++) {\n      taskList3.push(\n        new otherTask(\n          data3[i].taskID,\n          data3[i].taskName,\n          data3[i].taskDesc,\n  \n        )\n      );\n    }\n    setTaskList3(taskList3);\n   // console.log(data3);\n\n\n  }, [data,data2,data3]);\n\n  \n\n//\n\n  return (\n    <div className={styles.center_all}>\n      <h2 className={styles.list_title}>태스크 현황</h2>\n      <div className={styles.main_container}>\n        <div className={styles.sub_container_2}>\n          <SubmitterTopRow1 />\n          <div className={styles.scrollable_div}>\n          {taskList.map((task) => (\n            \n              <SubmitterJoined task={task}\n\n              />\n            ))}\n            \n\n            \n          </div>\n          \n        </div>\n        <div className={styles.sub_container_2} style={{ marginTop: 0 }}>\n          <SubmitterTopRow2/>\n          <div className={styles.scrollable_div}>\n          {taskList2.map((task) => (\n            <SubmitterNew task={task}\n            />\n            \n           ))}\n\n          </div>\n        </div>\n        <div className={styles.sub_container_2} style={{ marginTop: 0 }}>\n          <SubmitterTopRow2/>\n          <div className={styles.scrollable_div}>\n          {taskList3.map((task) => (\n            <SubmitterWaiting task={task}\n            />\n            \n           ))}\n          </div>\n        </div>\n      \n\n      </div>\n    </div>\n  );\n};\n\n            \n            ","/Users/jihoon/Desktop/Database2020/client/src/View/EstimatorMain.js",["217","218","219","220","221"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport { Record } from \"../Components/classes\";\nimport { QT } from \"../Components/classes\";\n\nimport { EstimatorTopRow } from \"../Components/EstimatorTopRow\";\nimport { EstimateUnfinished } from \"../Components/EstimateUnfinished\";\nimport { EstimateFinished } from \"../Components/EstimateFinished\";\nimport Axios from \"axios\";\n\nexport const EstimatorMain = ({ loginfo }) => {\n  // const testRecord = new Record(\n  //   1,\n  //   \"임시이름\",\n  //   \"임시 타입\",\n  //   \"둘리\",\n  //   1,\n  //   new QT(100, 10, 0.4),\n  //   null,\n  //   \"/\"\n  // );\n  \n\n  // var unfinished = [];\n  // var finished = [];\n  // unfinished.push(testRecord);\n  // unfinished.push(testRecord);\n  // unfinished.push(testRecord);\n  // finished.push(testRecord);\n  // finished.push(testRecord);\n  // finished.push(testRecord);\n\n  const LoadTasks = (unfinished, finished) => {\n    /*  function to initially load tasks to lists\n        userID is in \"loginfo.userID\"\n    */\n    \n  };\n\n  var loginfo;\n  var accountID = loginfo.accountID;\n  const axios = require(\"axios\").default;\n  \n  const [unfinishedRecord, setUnfinishedRecord] = useState();\n  const [finishedRecord, setFinishedRecord] = useState();\n  const [unfinished, setUnfinishedList] = useState([]);\n  const [finished, setFinishedList] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      await axios.get(`/api/Estimator/${accountID}/notYet`).then((res) => {\n        setUnfinishedRecord(res.data);\n      });\n      \n      await axios.get(`/api/Estimator/${accountID}/finished`).then((res) => {\n        setFinishedRecord(res.data);\n      });\n    }\n    fetchData();\n  }, []);\n  \n\n  useEffect(() => {\n    if (!unfinishedRecord) return;\n    var unfinished = [];\n    for (var i = 0; i < unfinishedRecord.length; i++){\n      unfinished.push(\n        new Record(\n          unfinishedRecord[i].ParsingDataSequenceFileID ,\n          unfinishedRecord[i].CollectedTaskID,\n          unfinishedRecord[i].BelongsRawDataTypeID,\n          unfinishedRecord[i].RDSFSubmitterID,\n          unfinishedRecord[i].Turn,\n          new QT(unfinishedRecord[i].TotalTupleNum, \n                 unfinishedRecord[i].DupTupleNum,\n                 unfinishedRecord[i].NullRatio),\n          unfinishedRecord[i].QualityScore,\n          unfinishedRecord[i].Directory\n        )\n      );\n    }\n    setUnfinishedList(unfinished);\n\n    if (!finishedRecord) return;\n    var finished = [];\n    for (var i = 0; i < finishedRecord.length; i++){\n      finished.push(\n        new Record(\n          finishedRecord[i].ParsingDataSequenceFileID ,\n          finishedRecord[i].CollectedTaskID,\n          finishedRecord[i].BelongsRawDataTypeID,\n          finishedRecord[i].RDSFSubmitterID,\n          finishedRecord[i].Turn,\n          new QT(finishedRecord[i].TotalTupleNum, \n                 finishedRecord[i].DupTupleNum,\n                 finishedRecord[i].NullRatio),\n          finishedRecord[i].QualityScore,\n          finishedRecord[i].Directory\n        )\n      );\n    }\n    setFinishedList(finished);\n  }, [unfinishedRecord, finishedRecord]);\n  \n\n\n  return (\n    <div className={styles.center_all}>\n      <h2 className={styles.list_title}>평가 현황</h2>\n      <div className={styles.main_container}>\n        <div className={styles.sub_container_2}>\n          <EstimatorTopRow />\n          <div className={styles.scrollable_div}>\n            {unfinished.map((record) => (\n              <EstimateUnfinished record={record} />\n            ))}\n          </div>\n        </div>\n        <div className={styles.sub_container_2} style={{ marginTop: 0 }}>\n          <EstimatorTopRow />\n          <div className={styles.scrollable_div}>\n            {finished.map((record) => (\n              <EstimateFinished record={record} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/View/AdminMain.js",["222"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"../CSS/mainstyle.module.css\";\n\nimport { AdminTask } from \"../Components/classes\";\nimport { Loading } from \"../Components/Loading\";\nimport { AdminTaskRowNav } from \"../Components/AdminTaskRowNav\";\nimport { AdminTaskRow } from \"../Components/AdminTaskRow\";\n\nexport const AdminMain = () => {\n  const axios = require(\"axios\").default;\n  const [data, setData] = useState();\n  const [taskList, setTaskList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const url = \"/api/AdminTask\";\n\n  useEffect(() => {\n    async function fetchData() {\n      await axios.get(url).then((res) => {\n        setData(res.data);\n      });\n    }\n    setLoading(true);\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (!data) return;\n    var list = [];\n    for (let i = 0; i < data.length; i++) {\n      list.push(\n        new AdminTask(\n          data[i].TaskID,\n          data[i].Name,\n          data[i].Description,\n          data[i].Period,\n          data[i].PassScore\n        )\n      );\n    }\n    setTaskList(list);\n    setLoading(false);\n  }, [data]);\n\n  return (\n    <div className={styles.center_all}>\n      <h2 className={styles.list_title}>태스크 목록</h2>\n      <div className={styles.main_container}>\n        <div className={styles.sub_container_1}>\n          {loading && <Loading />}\n          {!loading && (\n            <div>\n              <AdminTaskRowNav />\n              <div\n                className={styles.scrollable_div}\n                style={{ height: \"540px\" }}\n              >\n                {taskList.map((task) => (\n                  <AdminTaskRow key={task.TaskID} task={task} />\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      <Link to={{ pathname: \"/NewTask\" }}>\n        <button className={styles.add_btn}>태스크 추가</button>\n      </Link>\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminNav.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/AdminUserRowNav.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/CreateTaskTwo.js",["223"],"import React, { useState } from \"react\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Pair } from \"../Components/classes\";\nimport { SC } from \"../Components/classes\";\n\nimport { Schema } from \"../Components/Schema\";\n\nexport const CreateTaskTwo = ({ setStep, newTask }) => {\n  const [num, setNum] = useState(2);\n  const [row, setRow] = useState([1]);\n  const [pairList, setPairList] = useState([new Pair()]);\n\n  const handleRemove = () => {\n    if (num === 1) {\n      return;\n    }\n    setNum(num - 1);\n    setRow(row.filter((item) => item !== num - 1));\n    setPairList(pairList.slice(0, -1));\n  };\n\n  const handleNext = () => {\n    var finalList = [];\n    for (var i = 0; i < pairList.length; i++) {\n      if (pairList[i].name !== undefined && pairList[i].type !== undefined) {\n        finalList.push(pairList[i]);\n      }\n    }\n    if (finalList.length === 0) {\n      alert(\"스키마를 추가해주세요.\");\n      return;\n    }\n    var nameList = [];\n    for (var i = 0; i < finalList.length; i++) {\n      if (nameList.includes(finalList[i].name)) {\n        alert(\"중복 속성 이름이 있습니다.\");\n        return;\n      }\n      nameList.push(finalList[i].name);\n    }\n    newTask.TDTSchema = new SC(finalList);\n    setStep(3);\n    console.log(newTask.TDTSchema);\n  };\n\n  return (\n    <div className={`${styles.sub_container_a} ${styles.ninety}`}>\n      <div className={styles.title}>\n        <h1>태스크 데이터 테이블 스키마 설정</h1>\n        <form noValidate autoComplete=\"off\">\n          <div className={`${styles.scrollable_div} ${styles.box}`}>\n            {row.map((item) => (\n              <Schema key={item} pair={pairList[item - 1]} />\n            ))}\n          </div>\n        </form>\n        <div>\n          <IconButton\n            onClick={() => {\n              handleRemove();\n            }}\n          >\n            <RemoveCircleIcon />\n          </IconButton>\n          <IconButton\n            onClick={() => {\n              setPairList([...pairList, new Pair()]);\n              setNum(num + 1);\n              setRow([...row, num]);\n            }}\n          >\n            <AddCircleIcon />\n          </IconButton>\n        </div>\n        <div className={styles.button_container}>\n          <button\n            className={`${styles.add_btn} ${styles.button_row}`}\n            onClick={() => {\n              setStep(1);\n            }}\n          >\n            이전\n          </button>\n          <button\n            className={`${styles.add_btn} ${styles.button_row}`}\n            onClick={() => {\n              handleNext();\n            }}\n          >\n            다음\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/Components/classes.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/Loading.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/Schema.js",["224"],"import React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\n\nexport const Schema = ({ pair, raw, tdt }) => {\n  const dataType = [\n    \"bit\",\n    \"tinyint\",\n    \"smallint\",\n    \"int\",\n    \"bigint\",\n    \"decimal\",\n    \"numeric\",\n    \"float\",\n    \"real\",\n    \"date\",\n    \"time\",\n    \"datetime\",\n    \"timestamp\",\n    \"year\",\n    \"char\",\n    \"varchar\",\n    \"text\",\n    \"nchar\",\n    \"nvarchar\",\n    \"ntext\",\n    \"binary\",\n    \"varbinary\",\n    \"image\",\n    \"clob\",\n    \"bclob\",\n    \"xml\",\n    \"json\",\n  ];\n  const maxList = [\"varbinary\", \"nvarchar\", \"varchar\"];\n  const [toggleMax, setToggleMax] = useState(false);\n  const [type, setType] = useState(\"\");\n  const [maxLength, setMaxLength] = useState(\"\");\n  const [map, setMap] = useState(\"\");\n  const [name, setName] = useState(\"\");\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      <div>\n        <TextField\n          style={{ minWidth: \"200px\", marginRight: \"10px\" }}\n          id=\"name\"\n          label=\"속성 이름\"\n          placeholder=\"속성 이름을 입력하시오.\"\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n            pair.name = e.target.value;\n          }}\n        />\n      </div>\n      <div>\n        <FormControl style={{ minWidth: \"200px\", marginRight: \"10px\" }}>\n          <InputLabel>속성타입</InputLabel>\n          <Select\n            id=\"type\"\n            value={type}\n            onChange={(e) => {\n              if (maxList.includes(e.target.value)) {\n                setToggleMax(true);\n                pair.maxLength = 20;\n              } else {\n                setToggleMax(false);\n              }\n              setType(e.target.value);\n              pair.type = e.target.value;\n            }}\n          >\n            {dataType.map((type) => {\n              return <MenuItem value={type}>{type}</MenuItem>;\n            })}\n          </Select>\n        </FormControl>\n      </div>\n      {toggleMax && (\n        <div>\n          <TextField\n            style={{ minWidth: \"200px\", marginRight: \"10px\" }}\n            id=\"name\"\n            type=\"number\"\n            label=\"Max Length\"\n            placeholder=\"기본값=20\"\n            value={maxLength}\n            onChange={(e) => {\n              if (e.target.value > 65535 || e.target.value < 1) {\n                setMaxLength(20);\n                pair.maxLength = 20;\n              } else {\n                setMaxLength(e.target.value);\n                pair.maxLength = e.target.value;\n              }\n            }}\n          />\n        </div>\n      )}\n      {raw && (\n        <FormControl style={{ minWidth: \"200px\" }}>\n          <InputLabel>매핑속성</InputLabel>\n          <Select\n            id=\"type\"\n            value={map}\n            onChange={(e) => {\n              setMap(e.target.value);\n              if (e.target.value) {\n                if (e.target.value.maxLength) {\n                  setToggleMax(true);\n                } else {\n                  setToggleMax(false);\n                }\n                setMaxLength(e.target.value.maxLength);\n                setType(e.target.value.type);\n                pair.map = e.target.value.name;\n                pair.maxLength = e.target.value.maxLength;\n                pair.type = e.target.value.type;\n              } else {\n                pair.map = null;\n              }\n            }}\n          >\n            <MenuItem value={null}>null</MenuItem>\n            {tdt.map((pair) => {\n              return <MenuItem value={pair}>{pair.name}</MenuItem>;\n            })}\n          </Select>\n        </FormControl>\n      )}\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterTaskRowNav.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterTaskRow.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/CreateTaskFirst.js",["225"],"import React, { useEffect, useState } from \"react\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport { Link } from \"react-router-dom\";\n\nexport const CreateTaskFirst = ({ setStep, newTask }) => {\n  const axios = require(\"axios\").default;\n  const [dup, setDup] = useState();\n  const [name, setName] = useState();\n\n  const check = async () => {\n    var check = /^[A-Za-z][A-Za-z0-9_]*$/;\n    if (name.match(check)) {\n      newTask.name = name;\n    } else {\n      alert(\"이름은 영문자와 숫자, '_' 로만 구성해주세요.\");\n      return;\n    }\n    await axios.get(`/api/NewTask/${name}`).then((res) => setDup(res.data));\n  };\n\n  useEffect(() => {\n    if (!dup) return;\n    if (dup[0].N === 1) {\n      alert(\"이미 같은 이름의 태스크가 존재합니다.\");\n    } else {\n      if (newTask.name && newTask.desc && newTask.period && newTask.passScore) {\n        setStep(2);\n      } else alert(\"빈칸을 채워주세요.\");\n    }\n  }, [dup]);\n\n  return (\n    <div className={`${styles.sub_container_a} ${styles.ninety}`}>\n      <div className={styles.title}>\n        <h1>태스크 생성</h1>\n      </div>\n      <form noValidate autoComplete=\"off\">\n        <div>\n          <TextField\n            className={styles.input_box}\n            id=\"name\"\n            label=\"이름\"\n            placeholder=\"태스크 이름을 입력하시오.\"\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n          />\n        </div>\n        <div>\n          <TextField\n            className={styles.input_box}\n            id=\"description\"\n            label=\"설명\"\n            multiline\n            rows={4}\n            placeholder=\"태스크 설명을 입력하시오.\"\n            value={newTask.desc}\n            onChange={(e) => (newTask.desc = e.target.value)}\n          />\n        </div>\n        <div>\n          <TextField\n            className={styles.input_box}\n            id=\"period\"\n            label=\"업로드 주기\"\n            placeholder=\"업로드 주기를 입력하시오.\"\n            type=\"number\"\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">일마다 제출</InputAdornment>\n              ),\n            }}\n            value={newTask.period}\n            onChange={(e) => (newTask.period = e.target.value)}\n          />\n        </div>\n        <div>\n          <TextField\n            className={styles.input_box}\n            id=\"pass_score\"\n            label=\"패스 기준 점수\"\n            placeholder=\"패스기준을 입력하시오.\"\n            type=\"number\"\n            shrink\n            value={newTask.passScore}\n            onChange={(e) => (newTask.passScore = e.target.value)}\n          />\n        </div>\n      </form>\n      <div className={styles.button_container}>\n        <Link to=\"/\">\n          <button className={`${styles.add_btn} ${styles.button_row}`}>\n            닫기\n          </button>\n        </Link>\n        <button\n          className={`${styles.add_btn} ${styles.button_row}`}\n          onClick={() => check()}\n        >\n          다음\n        </button>\n      </div>\n    </div>\n  );\n};","/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterSubmit.js",["226","227","228","229","230","231","232","233","234","235","236","237","238","239","240"],"/Users/jihoon/Desktop/Database2020/client/src/Components/CreateTaskThree.js",["241","242"],"import React, { useState } from \"react\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport styles from \"../CSS/mainstyle.module.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { RPair } from \"../Components/classes\";\nimport { RSC } from \"../Components/classes\";\nimport { Schema } from \"../Components/Schema\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const CreateTaskThree = ({ setStep, newTask }) => {\n  const axios = require(\"axios\").default;\n  const [name, setName] = useState();\n  const [num, setNum] = useState(2);\n  const [row, setRow] = useState([1]);\n  const [pairList, setPairList] = useState([new RPair()]);\n  var history = useHistory();\n\n  const handleRemove = () => {\n    if (num === 1) {\n      return;\n    }\n    setNum(num - 1);\n    setRow(row.filter((item) => item !== num - 1));\n    setPairList(pairList.slice(0, -1));\n  };\n\n  const createTask = async () => {\n    await axios\n      .post(\"/api/Admin/CreateTask\", { newTask: newTask })\n      .then((res) => console.log(res))\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleNewRDT = () => {\n    var dup = [];\n    for (var i = 0; i < pairList.length; i++) {\n      if (dup.includes(pairList[i].map)) {\n        alert(\"중복 매핑이 있습니다.\");\n        return;\n      }\n      dup.push(pairList[i].map);\n    }\n    var finalList = [];\n    for (var i = 0; i < pairList.length; i++) {\n      if (pairList[i].name !== undefined && pairList[i].type !== undefined) {\n        finalList.push(pairList[i]);\n      }\n    }\n    if (finalList.length === 0) {\n      alert(\"스키마를 추가해주세요.\");\n      return;\n    }\n    var nameList = [];\n    for (var i = 0; i < finalList.length; i++) {\n      if (nameList.includes(finalList[i].name)) {\n        alert(\"중복 속성 이름이 있습니다.\");\n        return;\n      }\n      nameList.push(finalList[i].name);\n    }\n    newTask.RDTSchema.push(new RSC(name, finalList));\n    setName(\"\");\n    setNum(2);\n    setRow([]);\n    setPairList([new RPair()]);\n    alert(\"원본 타입이 추가되었습니다.\");\n  };\n\n  const handleComplete = () => {\n    if (!(name === \"\" || name === undefined || name === null)) {\n      handleNewRDT();\n    }\n    if (newTask.RDTSchema.length === 0) {\n      alert(\"최소 하나의 원본 타입을 추가해야합니다.\");\n      return;\n    }\n    createTask();\n    history.push(\"/\");\n    alert(\"태스크가 생성되었습니다.\");\n  };\n\n  return (\n    <div className={`${styles.sub_container_a} ${styles.ninety}`}>\n      <div className={styles.title}>\n        <h1>원본데이터타입 스키마 설정</h1>\n      </div>\n      <form noValidate autoComplete=\"off\">\n        <div>\n          <TextField\n            className={styles.input_box}\n            id=\"name\"\n            label=\"원본데이터타입 이름\"\n            placeholder=\"원본데이터 타입 이름을 입력하시오.\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </div>\n        <div className={`${styles.scrollable_div} ${styles.new_box}`}>\n          {row.map((item) => (\n            <Schema\n              key={item}\n              pair={pairList[item - 1]}\n              raw={true}\n              tdt={newTask.TDTSchema.list}\n            />\n          ))}\n        </div>\n      </form>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <IconButton\n          onClick={() => {\n            handleRemove();\n          }}\n        >\n          <RemoveCircleIcon />\n        </IconButton>\n        <IconButton\n          onClick={() => {\n            setPairList([...pairList, new RPair()]);\n            setNum(num + 1);\n            setRow([...row, num]);\n          }}\n        >\n          <AddCircleIcon />\n        </IconButton>\n      </div>\n      <div className={styles.button_container}>\n        <button\n          className={`${styles.add_btn} ${styles.button_row}`}\n          onClick={() => {\n            setStep(2);\n            newTask.RDTSchema = undefined;\n          }}\n        >\n          이전\n        </button>\n        <button\n          className={`${styles.add_btn} ${styles.button_row}`}\n          onClick={() => handleNewRDT()}\n        >\n          원본타입추가\n        </button>\n        <button\n          className={`${styles.add_btn} ${styles.button_row}`}\n          onClick={() => handleComplete()}\n        >\n          완료\n        </button>\n      </div>\n    </div>\n  );\n};","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminUserRow.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/AdminParticipantRow.js",["243","244"],"import React from \"react\";\nimport styles from \"../CSS/component.module.css\";\n\nexport const AdminParticipantRow = ({ reload, user, taskID, setReload }) => {\n  const axios = require(\"axios\").default;\n  const Admit = async (admit) => {\n    await axios\n      .post(\"/api/userQueue/Admit\", {\n        AccountID: user.AccountID,\n        newValue: admit,\n        targetTaskID: taskID,\n      })\n      .then((res) => console.log(res));\n    setReload(!reload);\n  };\n  return (\n    <div className={styles.row_container}>\n      <p>{user.name}</p>\n      <p>{user.sex}</p>\n      <p>{user.birth}</p>\n      <p>{user.score}</p>\n      {user.admit == 1 && <p>수락됨</p>}\n      {user.admit == 0 && <p>거절됨</p>}\n      {!user.admit && (\n        <div className={styles.btn_row}>\n          <button onClick={() => Admit(1)}>승인</button>\n          <button onClick={() => Admit(0)}>거절</button>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/Components/AdminParticipantRowNav.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/Login.js",["245","246","247","248"],"import React, { useState, useEffect } from \"react\";\nimport styles from \"../CSS/loginstyle.module.css\";\nimport { useHistory } from \"react-router-dom\";\nimport logo from \"../Images/로고.png\";\nimport { User } from \"./classes\";\n\nexport const Login = () => {\n  const [id, setID] = useState();\n  const [pw, setPW] = useState();\n  const axios = require(\"axios\");\n  var type = {\n    Submitter: \"제출자\",\n    Administrator: \"관리자\",\n    Estimator: \"평가자\",\n  };\n  var history = useHistory();\n  const [data, setData] = useState();\n\n  const handleLogin = async () => {\n    const url = \"/api/loginAuth\";\n    const res = await axios.get(url + `/${id}&${pw}`).catch((err) => {\n      if (err.response) {\n        console.log(err.responsse);\n      } else if (err.request) {\n        console.log(\"never recieved a response\");\n      }\n    });\n    if (res && res.data) setData(res);\n  };\n\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    if (data.data.length == 0) {\n      alert(\"아이디와 비밀번호를 확인해주세요.\");\n      return;\n    }\n    let loginInfo = new User(\n      data.data[0].AccountID,\n      data.data[0].UserID,\n      type[data.data[0].Role],\n      data.data[0].Name,\n      data.data[0].Gender.data,\n      data.data[0].Address,\n      data.data[0].BirthDate,\n      data.data[0].Phone\n    );\n    localStorage.setItem(`user`, JSON.stringify(loginInfo));\n    history.push(\"/\");\n  }, [data]);\n\n  return (\n    <div className={styles.main_container}>\n      <div className={styles.div_signin}>\n        <img className={styles.main_logo} src={logo} alt=\"메인 로고\" />\n        <p className={`${styles.notice} ${styles.login_p}`}>로그인 하세요</p>\n        <input\n          type=\"email\"\n          id=\"inputEmail\"\n          className={styles.div_input}\n          placeholder=\"User ID\"\n          value={id}\n          onChange={(e) => setID(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          id=\"inputPassword\"\n          className={styles.div_input}\n          placeholder=\"Password\"\n          value={pw}\n          onChange={(e) => setPW(e.target.value)}\n        />\n        <br />\n        <button\n          className={styles.button}\n          type=\"submit\"\n          onClick={() => handleLogin()}\n        >\n          로그인\n        </button>\n        <br />\n        <a\n          href=\"\"\n          id={styles.div_signup}\n          className={styles.login_a}\n          href=\"./signup\"\n        >\n          회원가입\n        </a>\n        <p className={`${styles.copyright} ${styles.login_p}`}>\n          &copy; 연세대학교 데이터베이스 14팀\n        </p>\n      </div>\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/Components/Nav.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterJoined.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterTopRow1.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterTopRow2.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterNew.js",["249","250"],"import React, { useState } from \"react\";\nimport styles from \"../CSS/component.module.css\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const SubmitterNew =  ({task })  => {\n  var logInfo;\n  var history = useHistory();\n  const loggedIn = localStorage.getItem(\"user\");\n  if (loggedIn) {\n    logInfo = JSON.parse(loggedIn);\n  } else {\n    history.push(\"/\");\n  }\n  \n\n  const SubmitterID = logInfo.accountID;\n  const TaskID = task.taskID;\n\n  const axios = require('axios');\n  const Apply = async () => {\n    await axios.post(`/api/apply/${SubmitterID}/${TaskID}`, {\n      SubmitterID : SubmitterID,\n      TaskID : TaskID \n    })\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error){\n      console.log(error);\n    });\n  };\n  \n  \n  return (\n    <div>\n      <div className={styles.row_container}>\n        <p>{task.taskName}</p>\n        <p>{task.taskDesc}</p>\n        <div>\n          <button className={styles.row_button} onClick={() => Apply()}>\n            참여신청\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/Components/EstimatorTopRow.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/AdminTaskRowNav.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/SubmitterWaiting.js",["251","252"],"import React, { useState } from \"react\";\nimport styles from \"../CSS/component.module.css\";\nimport { Link } from \"react-router-dom\";\n\nexport const SubmitterWaiting = ({task }) => {\n  \n  return (\n    <div>\n      <div className={styles.row_container}>\n        <p>{task.taskName}</p>\n        <p>{task.taskDesc}</p>\n        <div>\n          <button className={styles.row_button}>\n            승인 대기중\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/Components/EstimateUnfinished.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/EstimateFinished.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/AdminTaskRow.js",[],"/Users/jihoon/Desktop/Database2020/client/src/Components/EstimatorEstimate.js",["253"],"import React, { useState } from \"react\";\nimport styles from \"../CSS/component.module.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { IconButton } from \"@material-ui/core\";\nimport styles2 from \"../CSS/mainstyle.module.css\";\n\n\nexport const EstimatorEstimate = ({ record, setTogglePopUp }) => {\n  const [score, setScore] = useState(0);\n  const DomainCheck = (value) => {\n    if (value > 10) {\n      setScore(10);\n    } else if (value < 0) {\n      setScore(0);\n    } else {\n      setScore(value);\n    }\n  };\n\n  const download = (record) => {\n    // download file\n    setTogglePopUp(false);\n  };\n\n\n  var record;\n  var pdsfID = record.PDSFID;\n  const axios = require(\"axios\").default;\n  console.log(record);\n\n  const submit = async () => {\n    // process submitting\n    await axios.post(`/api/Estimator/estimate/${pdsfID}`, {\n      ParsingDataSequenceFileID : pdsfID,\n      QualityScore : score\n    })\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error){\n      console.log(error);\n    });\n    setTogglePopUp(false);\n  };\n\n  \n\n\n  return (\n    <div className={styles.popup}>\n      <IconButton\n        className={styles.close_btn}\n        style={{ position: \"absolute\" }}\n        onClick={() => setTogglePopUp(false)}\n      >\n        <CloseIcon fontSize=\"large\" />\n      </IconButton>\n      <h3>태스크 이름</h3>\n      <p>{record.taskName}</p>\n      <h3>태스크 타입</h3>\n      <p>{record.taskType}</p>\n      <h3>제출자</h3>\n      <p>{record.submitter}</p>\n      <h3>회차</h3>\n      <p>{record.turn}</p>\n      <table className={styles.qualitative_test}>\n        <thead>\n          <tr>\n            <th>총 튜플 수</th>\n            <th>총 중복 튜플 수</th>\n            <th>Null Ratio</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>{record.qt.total_tup}</th>\n            <th>{record.qt.dup_tup}</th>\n            <th>{record.qt.null_ratio}</th>\n          </tr>\n        </tbody>\n      </table>\n      <h3 style={{ textAlign: \"center\" }}>점수</h3>\n      <div className={styles.evaluate}>\n        <button onClick={() => DomainCheck(score - 1)}>-</button>\n        <input\n          type=\"number\"\n          value={score}\n          onChange={(e) => DomainCheck(e.target.value)}\n        />\n        <button onClick={() => DomainCheck(score + 1)}>+</button>\n      </div>\n\n      <div className={styles2.button_container}>\n        <button\n          className={`${styles2.add_btn} ${styles2.button_row}`}\n          onClick={() => download(record)}\n        >\n          다운로드\n        </button>\n        <button\n          className={`${styles2.add_btn} ${styles2.button_row}`}\n          onClick={() => submit()}\n        >\n          완료\n        </button>\n      </div>\n    </div>\n  );\n};\n","/Users/jihoon/Desktop/Database2020/client/src/Components/EstimatorDetail.js",["254","255"],"import React, { useState, useEffect } from \"react\";\nimport styles from \"../CSS/component.module.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { IconButton } from \"@material-ui/core\";\nimport styles2 from \"../CSS/mainstyle.module.css\";\n\nexport const EstimatorDetail = ({ record, setTogglePopUp }) => {\n  const download = (record) => {\n    console.log(record);\n  };\n  return (\n    <div className={styles.popup}>\n      <IconButton\n        className={styles.close_btn}\n        style={{ position: \"absolute\" }}\n        onClick={() => setTogglePopUp(false)}\n      >\n        <CloseIcon fontSize=\"large\" />\n      </IconButton>\n      <h3>태스크 이름</h3>\n      <p>{record.taskName}</p>\n      <h3>태스크 타입</h3>\n      <p>{record.taskType}</p>\n      <h3>제출자</h3>\n      <p>{record.submitter}</p>\n      <h3>회차</h3>\n      <p>{record.turn}</p>\n      <table className={styles.qualitative_test}>\n        <thead>\n          <tr>\n            <th>총 튜플 수</th>\n            <th>총 중복 튜플 수</th>\n            <th>Null Ratio</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>{record.qt.total_tup}</th>\n            <th>{record.qt.dup_tup}</th>\n            <th>{record.qt.null_ratio}</th>\n          </tr>\n        </tbody>\n      </table>\n      <h3 style={{ textAlign: \"center\" }}>점수</h3>\n      <div className={styles.evaluate}>\n        <button disabled>-</button>\n        <input type=\"number\" value={record.score} disabled />\n        <button disabled>+</button>\n      </div>\n      <div className={styles2.button_container}>\n        <button\n          className={`${styles2.add_btn} ${styles2.button_row}`}\n          onClick={() => download(record)}\n        >\n          다운로드\n        </button>\n        <button\n          className={`${styles2.add_btn} ${styles2.button_row}`}\n          onClick={() => setTogglePopUp(false)}\n        >\n          완료\n        </button>\n      </div>\n    </div>\n  );\n};\n",{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","severity":1,"message":"261","line":72,"column":6,"nodeType":"262","endLine":72,"endColumn":11,"suggestions":"263"},{"ruleId":"264","severity":1,"message":"265","line":91,"column":31,"nodeType":"266","messageId":"267","endLine":91,"endColumn":33},{"ruleId":"268","severity":1,"message":"269","line":12,"column":10,"nodeType":"270","messageId":"271","endLine":12,"endColumn":17},{"ruleId":"260","severity":1,"message":"272","line":80,"column":6,"nodeType":"262","endLine":80,"endColumn":8,"suggestions":"273"},{"ruleId":"268","severity":1,"message":"274","line":13,"column":19,"nodeType":"270","messageId":"271","endLine":13,"endColumn":29},{"ruleId":"260","severity":1,"message":"275","line":26,"column":6,"nodeType":"262","endLine":26,"endColumn":8,"suggestions":"276"},{"ruleId":"268","severity":1,"message":"277","line":5,"column":20,"nodeType":"270","messageId":"271","endLine":5,"endColumn":23},{"ruleId":"268","severity":1,"message":"278","line":12,"column":10,"nodeType":"270","messageId":"271","endLine":12,"endColumn":20},{"ruleId":"279","severity":1,"message":"280","line":41,"column":31,"nodeType":"266","messageId":"281","endLine":41,"endColumn":32},{"ruleId":"279","severity":1,"message":"280","line":44,"column":31,"nodeType":"266","messageId":"281","endLine":44,"endColumn":32},{"ruleId":"260","severity":1,"message":"282","line":49,"column":6,"nodeType":"262","endLine":49,"endColumn":8,"suggestions":"283"},{"ruleId":"260","severity":1,"message":"284","line":39,"column":6,"nodeType":"262","endLine":39,"endColumn":21,"suggestions":"285"},{"ruleId":"264","severity":1,"message":"265","line":58,"column":35,"nodeType":"266","messageId":"267","endLine":58,"endColumn":37},{"ruleId":"268","severity":1,"message":"286","line":15,"column":7,"nodeType":"270","messageId":"271","endLine":15,"endColumn":13},{"ruleId":"268","severity":1,"message":"287","line":16,"column":7,"nodeType":"270","messageId":"271","endLine":16,"endColumn":10},{"ruleId":"268","severity":1,"message":"288","line":17,"column":7,"nodeType":"270","messageId":"271","endLine":17,"endColumn":14},{"ruleId":"268","severity":1,"message":"289","line":19,"column":9,"nodeType":"270","messageId":"271","endLine":19,"endColumn":18},{"ruleId":"268","severity":1,"message":"290","line":28,"column":16,"nodeType":"270","messageId":"271","endLine":28,"endColumn":23},{"ruleId":"279","severity":1,"message":"280","line":41,"column":31,"nodeType":"266","messageId":"281","endLine":41,"endColumn":32},{"ruleId":"279","severity":1,"message":"280","line":41,"column":55,"nodeType":"266","messageId":"281","endLine":41,"endColumn":56},{"ruleId":"279","severity":1,"message":"280","line":44,"column":31,"nodeType":"266","messageId":"281","endLine":44,"endColumn":32},{"ruleId":"279","severity":1,"message":"280","line":44,"column":55,"nodeType":"266","messageId":"281","endLine":44,"endColumn":56},{"ruleId":"279","severity":1,"message":"280","line":48,"column":31,"nodeType":"266","messageId":"281","endLine":48,"endColumn":32},{"ruleId":"279","severity":1,"message":"280","line":51,"column":31,"nodeType":"266","messageId":"281","endLine":51,"endColumn":32},{"ruleId":"260","severity":1,"message":"291","line":56,"column":6,"nodeType":"262","endLine":56,"endColumn":8,"suggestions":"292"},{"ruleId":"260","severity":1,"message":"293","line":119,"column":6,"nodeType":"262","endLine":119,"endColumn":24,"suggestions":"294"},{"ruleId":"268","severity":1,"message":"295","line":9,"column":8,"nodeType":"270","messageId":"271","endLine":9,"endColumn":13},{"ruleId":"268","severity":1,"message":"289","line":33,"column":9,"nodeType":"270","messageId":"271","endLine":33,"endColumn":18},{"ruleId":"296","severity":1,"message":"297","line":40,"column":7,"nodeType":"270","messageId":"298","endLine":40,"endColumn":14},{"ruleId":"260","severity":1,"message":"299","line":60,"column":6,"nodeType":"262","endLine":60,"endColumn":8,"suggestions":"300"},{"ruleId":"296","severity":1,"message":"301","line":86,"column":14,"nodeType":"270","messageId":"298","endLine":86,"endColumn":15},{"ruleId":"260","severity":1,"message":"261","line":25,"column":6,"nodeType":"262","endLine":25,"endColumn":8,"suggestions":"302"},{"ruleId":"296","severity":1,"message":"301","line":37,"column":14,"nodeType":"270","messageId":"298","endLine":37,"endColumn":15},{"ruleId":"268","severity":1,"message":"303","line":1,"column":27,"nodeType":"270","messageId":"271","endLine":1,"endColumn":36},{"ruleId":"260","severity":1,"message":"304","line":32,"column":6,"nodeType":"262","endLine":32,"endColumn":11,"suggestions":"305"},{"ruleId":"268","severity":1,"message":"306","line":1,"column":27,"nodeType":"270","messageId":"271","endLine":1,"endColumn":36},{"ruleId":"268","severity":1,"message":"307","line":5,"column":10,"nodeType":"270","messageId":"271","endLine":5,"endColumn":16},{"ruleId":"268","severity":1,"message":"308","line":32,"column":7,"nodeType":"270","messageId":"271","endLine":32,"endColumn":10},{"ruleId":"268","severity":1,"message":"309","line":36,"column":10,"nodeType":"270","messageId":"271","endLine":36,"endColumn":19},{"ruleId":"268","severity":1,"message":"310","line":38,"column":10,"nodeType":"270","messageId":"271","endLine":38,"endColumn":16},{"ruleId":"268","severity":1,"message":"311","line":39,"column":10,"nodeType":"270","messageId":"271","endLine":39,"endColumn":17},{"ruleId":"268","severity":1,"message":"312","line":41,"column":7,"nodeType":"270","messageId":"271","endLine":41,"endColumn":10},{"ruleId":"260","severity":1,"message":"313","line":54,"column":6,"nodeType":"262","endLine":54,"endColumn":8,"suggestions":"314"},{"ruleId":"260","severity":1,"message":"315","line":64,"column":6,"nodeType":"262","endLine":64,"endColumn":8,"suggestions":"316"},{"ruleId":"264","severity":1,"message":"317","line":123,"column":35,"nodeType":"266","messageId":"267","endLine":123,"endColumn":37},{"ruleId":"268","severity":1,"message":"318","line":124,"column":19,"nodeType":"270","messageId":"271","endLine":124,"endColumn":20},{"ruleId":"279","severity":1,"message":"280","line":163,"column":30,"nodeType":"266","messageId":"281","endLine":163,"endColumn":31},{"ruleId":"279","severity":1,"message":"280","line":174,"column":27,"nodeType":"266","messageId":"281","endLine":174,"endColumn":28},{"ruleId":"279","severity":1,"message":"280","line":182,"column":38,"nodeType":"266","messageId":"281","endLine":182,"endColumn":39},{"ruleId":"279","severity":1,"message":"280","line":189,"column":28,"nodeType":"266","messageId":"281","endLine":189,"endColumn":29},{"ruleId":"296","severity":1,"message":"301","line":48,"column":14,"nodeType":"270","messageId":"298","endLine":48,"endColumn":15},{"ruleId":"296","severity":1,"message":"301","line":58,"column":14,"nodeType":"270","messageId":"298","endLine":58,"endColumn":15},{"ruleId":"264","severity":1,"message":"265","line":22,"column":19,"nodeType":"266","messageId":"267","endLine":22,"endColumn":21},{"ruleId":"264","severity":1,"message":"265","line":23,"column":19,"nodeType":"266","messageId":"267","endLine":23,"endColumn":21},{"ruleId":"264","severity":1,"message":"265","line":35,"column":26,"nodeType":"266","messageId":"267","endLine":35,"endColumn":28},{"ruleId":"260","severity":1,"message":"319","line":51,"column":6,"nodeType":"262","endLine":51,"endColumn":12,"suggestions":"320"},{"ruleId":"321","severity":1,"message":"322","line":83,"column":9,"nodeType":"323","endLine":88,"endColumn":10},{"ruleId":"324","severity":1,"message":"325","line":87,"column":11,"nodeType":"326","endLine":87,"endColumn":26},{"ruleId":"268","severity":1,"message":"327","line":1,"column":17,"nodeType":"270","messageId":"271","endLine":1,"endColumn":25},{"ruleId":"268","severity":1,"message":"328","line":3,"column":10,"nodeType":"270","messageId":"271","endLine":3,"endColumn":14},{"ruleId":"268","severity":1,"message":"327","line":1,"column":17,"nodeType":"270","messageId":"271","endLine":1,"endColumn":25},{"ruleId":"268","severity":1,"message":"328","line":3,"column":10,"nodeType":"270","messageId":"271","endLine":3,"endColumn":14},{"ruleId":"296","severity":1,"message":"329","line":26,"column":7,"nodeType":"270","messageId":"298","endLine":26,"endColumn":13},{"ruleId":"268","severity":1,"message":"327","line":1,"column":17,"nodeType":"270","messageId":"271","endLine":1,"endColumn":25},{"ruleId":"268","severity":1,"message":"303","line":1,"column":27,"nodeType":"270","messageId":"271","endLine":1,"endColumn":36},"no-native-reassign",["330"],"no-negated-in-lhs",["331"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'axios'. Either include it or remove the dependency array.","ArrayExpression",["332"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Loading' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'axios' and 'task.taskID'. Either include them or remove the dependency array.",["333"],"'setNewTask' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'newTask'. Either include it or remove the dependency array.",["334"],"'PNP' is defined but never used.","'useForkRef' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'axios', 'logInfo.accountID', and 'tid'. Either include them or remove the dependency array.",["335"],"React Hook useEffect has missing dependencies: 'axios' and 'url'. Either include them or remove the dependency array.",["336"],"'Joined' is assigned a value but never used.","'New' is assigned a value but never used.","'Waiting' is assigned a value but never used.","'LoadTasks' is assigned a value but never used.","'setData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axios' and 'loginfo.accountID'. Either include them or remove the dependency array.",["337"],"React Hook useEffect has missing dependencies: 'tmpData1' and 'tmpData2'. Either include them or remove the dependency array.",["338"],"'Axios' is defined but never used.","no-redeclare","'loginfo' is already defined.","redeclared","React Hook useEffect has missing dependencies: 'accountID' and 'axios'. Either include them or remove the dependency array.",["339"],"'i' is already defined.",["340"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'newTask.desc', 'newTask.name', 'newTask.passScore', 'newTask.period', and 'setStep'. Either include them or remove the dependency array. If 'setStep' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["341"],"'Component' is defined but never used.","'colors' is defined but never used.","'lst' is assigned a value but never used.","'trmaplist' is assigned a value but never used.","'pdsfID' is assigned a value but never used.","'qtestID' is assigned a value but never used.","'aID' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axios' and 'taskName'. Either include them or remove the dependency array.",["342"],"React Hook useEffect has missing dependencies: 'axios' and 'logInfo.accountID'. Either include them or remove the dependency array.",["343"],"Expected '!==' and instead saw '!='.","'n' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'type'. Either include them or remove the dependency array.",["344"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useState' is defined but never used.","'Link' is defined but never used.","'record' is already defined.","no-global-assign","no-unsafe-negation",{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},"Update the dependencies array to be: [axios, url]",{"range":"371","text":"372"},"Update the dependencies array to be: [axios, task.taskID]",{"range":"373","text":"374"},"Update the dependencies array to be: [newTask]",{"range":"375","text":"376"},"Update the dependencies array to be: [axios, logInfo.accountID, tid]",{"range":"377","text":"378"},"Update the dependencies array to be: [reload, props, axios, url]",{"range":"379","text":"380"},"Update the dependencies array to be: [axios, loginfo.accountID]",{"range":"381","text":"382"},"Update the dependencies array to be: [data, data2, data3, tmpData1, tmpData2]",{"range":"383","text":"384"},"Update the dependencies array to be: [accountID, axios]",{"range":"385","text":"386"},"Update the dependencies array to be: [axios]",{"range":"387","text":"388"},"Update the dependencies array to be: [dup, newTask.desc, newTask.name, newTask.passScore, newTask.period, setStep]",{"range":"389","text":"390"},"Update the dependencies array to be: [axios, taskName]",{"range":"391","text":"392"},"Update the dependencies array to be: [axios, logInfo.accountID]",{"range":"393","text":"394"},"Update the dependencies array to be: [data, history, type]",{"range":"395","text":"396"},[2160,2165],"[axios, url]",[2515,2517],"[axios, task.taskID]",[841,843],"[newTask]",[1523,1525],"[axios, logInfo.accountID, tid]",[1232,1247],"[reload, props, axios, url]",[1706,1708],"[axios, loginfo.accountID]",[2977,2995],"[data, data2, data3, tmpData1, tmpData2]",[1706,1708],"[accountID, axios]",[794,796],"[axios]",[990,995],"[dup, newTask.desc, newTask.name, newTask.passScore, newTask.period, setStep]",[1455,1457],"[axios, taskName]",[1668,1670],"[axios, logInfo.accountID]",[1357,1363],"[data, history, type]"]